



Internet Engineering Task Force                       G. Normington, Ed.
Internet-Draft                                              VMware, Inc.
Intended status: Standards Track                            23 July 2020
Expires: 24 January 2021


                 JavaScript Object Notation (JSON) Path
                    draft-normington-jsonpath-latest

Abstract

   JSON Path defines a string syntax for identifying values within a
   JavaScript Object Notation (JSON) document.

Note

   *This document is a work in progress and has not yet been published
   as an Internet Draft.*

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 24 January 2021.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.











Normington               Expires 24 January 2021                [Page 1]

Internet-Draft   JavaScript Object Notation (JSON) Path        July 2020


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   2
     1.2.  ABNF Syntax . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  JSON Path Syntax and Semantics  . . . . . . . . . . . . . . .   3
     2.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
     2.3.  Implementation  . . . . . . . . . . . . . . . . . . . . .   3
     2.4.  Syntax  . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.5.  Semantics . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.6.  Matchers  . . . . . . . . . . . . . . . . . . . . . . . .   5
       2.6.1.  Dot Child Matcher . . . . . . . . . . . . . . . . . .   5
       2.6.2.  Union Matcher . . . . . . . . . . . . . . . . . . . .   6
         2.6.2.1.  Syntax  . . . . . . . . . . . . . . . . . . . . .   6
         2.6.2.2.  Semantics . . . . . . . . . . . . . . . . . . . .   6
         2.6.2.3.  Union Child . . . . . . . . . . . . . . . . . . .   6
         2.6.2.4.  Array Index . . . . . . . . . . . . . . . . . . .   8
   3.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .   8
   5.  Alternatives  . . . . . . . . . . . . . . . . . . . . . . . .   9
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   9
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .   9
     6.2.  Informative References  . . . . . . . . . . . . . . . . .   9
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  10

1.  Introduction

   JSON Path, or rather JSONPath, was introduced by Stefan Goessner as a
   simple form of XPath for JSON.  See his original article [Goessner].

   JSON is defined by RFC 8259 [RFC8259].

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].




Normington               Expires 24 January 2021                [Page 2]

Internet-Draft   JavaScript Object Notation (JSON) Path        July 2020


1.2.  ABNF Syntax

   The syntax in this document conforms to ABNF as defined by RFC 5234
   [RFC5234].

   ABNF terminal values in this document define Unicode code points
   rather than their UTF-8 encoding.  For example, the Unicode PLACE OF
   INTEREST SIGN (U+2318) would be defined in ABNF as "%x2318".

2.  JSON Path Syntax and Semantics

2.1.  Overview

   A JSON Path is a string which matches zero or more nodes of any JSON
   document.  A valid JSON Path conforms to the ABNF syntax defined by
   this document.

   A JSON Path MUST be encoded using UTF-8.  To parse a JSON Path
   according to the grammar in this document, its UTF-8 form SHOULD
   first be decoded into Unicode code points as described in RFC 3629
   [RFC3629].

2.2.  Terminology

   A JSON document is logically a tree of nodes with the document as the
   root node of the tree.

   Each node holds a JSON value (as defined by RFC 8259 [RFC8259]) of
   one of the types object, array, number, string, or one of the
   literals "true", "false", or "null".  The type of the JSON value held
   by a node is sometimes referred to as the type of the node.

   The descendants of a node are taken to include the node itself and
   the descendants of any children of the node.

2.3.  Implementation

   An implementation of this specification, from now on referred to
   simply as "an implementation", SHOULD takes two inputs, a JSON Path
   and a JSON document, and produce a possibly empty list of nodes of
   the JSON document which match the JSON Path or an error (but not
   both).

   If there is no matching node and no error has occurred, an
   implementation MUST return an empty list of nodes.






Normington               Expires 24 January 2021                [Page 3]

Internet-Draft   JavaScript Object Notation (JSON) Path        July 2020


   Syntax errors in the JSON Path SHOULD be detected before matching is
   attempted since they do not depend on the JSON document.  Therefore,
   an implementation SHOULD take a JSON Path and produce an optional
   syntax error and then, if and only if an error was not produced,
   SHOULD take a JSON document and produce a list of matches or an error
   (but not both).

   Alternatively, an implementation MAY take a JSON Path and a JSON
   document and produce a list of matches or an optional error (but not
   both).

   For any implementation, if a syntactically invalid JSON Path is
   provided, the implementation MUST return an error.

   If a syntactially invalid JSON document is provided, any
   implementation SHOULD return an error.

2.4.  Syntax

   Syntactically, a JSON Path consists of a root selector ("$"), which
   selects the root node of a JSON document, followed by a possibly
   empty sequence of _matchers_.

   json-path = root-selector *matcher
   root-selector = %x24               ; $ selects document root node

   The syntax and semantics of each matcher is defined below.

2.5.  Semantics

   The root selector "$" not only selects the root node of the input
   document, but it also produces as output a list consisting of one
   node: the input document.

   A matcher may match a node and, if it matches, may then select zero
   or more descendants of the node for further processing.  But there's
   more to it than this: each matcher acts on a list of nodes and
   produces a list of nodes, as follows.

   After the root selector, the remainder of the JSON Path is processed
   by passing lists of nodes from one matcher to the next ending up with
   a list of nodes which is the result of matching the JSON Path to the
   input JSON document.








Normington               Expires 24 January 2021                [Page 4]

Internet-Draft   JavaScript Object Notation (JSON) Path        July 2020


   Each matcher acts on its input list of nodes as follows.  For each
   node in the list, the matcher may or may not match the node.  If the
   matcher matches the node, it selects zero or more descendants of the
   node.  The output list of nodes of a matcher is the concatenation of
   the lists of selected descendents for each input node.

   A specific, non-normative example will make this clearer.  Suppose
   the input document is: "{"a":[{"b":0},{"b":1},{"b":2}]}".  As we will
   see later, the JSON Path "$.a[*].b" selects the following list of
   nodes: "0", "1", "2".  Let's walk through this in detail.

   The JSON Path consists of "$" followed by three matchers: ".a",
   "[*]", and ".b".

   Firstly, "$" matches the input document and selects the root node
   which is the input document.  So the result is a list consisting of
   just the root node.

   Next, ".a" matches any input node of type object and selects any
   value of the input node corresponding to the key ""a"".  The result
   is again a list of one node: "[{"b":0},{"b":1},{"b":2}]".

   Next, "[*]" matches any input node which is an array and selects all
   the elements of the input node.  The result is a list of three nodes:
   "{"b":0}", "{"b":1}", and "{"b":2}".

   Finally, ".b" matches any input node of type object and selects any
   value of the input node corresponding to the key ""b"".  The result
   is the concatenation of three lists each of length one containing
   "0", "1", "2", respectively.

   As a consequence of this approach, if any of the matchers matches no
   nodes, then the whole JSON Path matches no nodes.

   In what follows, the semantics of each matcher are defined for each
   type of node.

2.6.  Matchers

2.6.1.  Dot Child Matcher

Syntax

   A dot child matcher has a key known as a dot child name or a single
   asterisk ("*").

   A dot child name corresponds to a key in a JSON object, without the
   surrounding double quotes (""").



Normington               Expires 24 January 2021                [Page 5]

Internet-Draft   JavaScript Object Notation (JSON) Path        July 2020


   matcher = dot-child             ; see below for alternatives
   dot-child = %x2E dot-child-name / ; .<dot-child-name>
               %x2E %x2A             ; .*
   dot-child-name = TBD

   More general child names, such as the empty string, are supported by
   "Union Child" (Section 2.6.2.3).

Semantics

   A dot child name which is not a single asterisk ("*") matches any
   node which is an object having a key equal to the dot child name and
   selects the value corresponding to that key.  It does not match a
   node which is not an object.

   A dot child name consisting of a single asterisk is a wild card.  It
   matches any node which is an object and selects all the values of the
   object.  It also matches any node which is an array and selects all
   the elements of the array.  It does not match a number, string, or
   literal node.

2.6.2.  Union Matcher

2.6.2.1.  Syntax

   A union matcher consists of one or more union elements.

   matcher =/ union
   union = %x5B ws union-elements ws %x5D ; [...]
   ws = *%x20                             ; zero or more spaces
   union-elements = union-element /
                    union-element ws %x2C ws union-elements
                                          ; ,-separated list

2.6.2.2.  Semantics

   A union matches any node which is matched by at least one of the
   union elements and selects the concatenation of the lists (in the
   order of the matchers) of descendants selected by the union elements.

2.6.2.3.  Union Child

Syntax

   A union child is a union element consisting of a quoted string.






Normington               Expires 24 January 2021                [Page 6]

Internet-Draft   JavaScript Object Notation (JSON) Path        July 2020


   union-element = union-child ; see below for more alternatives
   union-child = %x22 *double-quoted %x22 / ; "string"
                 %x27 *single-quoted %x27   ; 'string'

   double-quoted = dq-unescaped /
             escape (
                 %x22 /          ; "    quotation mark  U+0022
                 %x5C /          ; \    reverse solidus U+005C
                 %x2F /          ; /    solidus         U+002F
                 %x62 /          ; b    backspace       U+0008
                 %x66 /          ; f    form feed       U+000C
                 %x6E /          ; n    line feed       U+000A
                 %x72 /          ; r    carriage return U+000D
                 %x74 /          ; t    tab             U+0009
                 %x75 4HEXDIG )  ; uXXXX                U+XXXX


         dq-unescaped = %x20-21 / %x23-5B / %x5D-10FFFF

   single-quoted = sq-unescaped /
             escape (
                 %x27 /          ; '    apostrophe      U+0027
                 %x5C /          ; \    reverse solidus U+005C
                 %x2F /          ; /    solidus         U+002F
                 %x62 /          ; b    backspace       U+0008
                 %x66 /          ; f    form feed       U+000C
                 %x6E /          ; n    line feed       U+000A
                 %x72 /          ; r    carriage return U+000D
                 %x74 /          ; t    tab             U+0009
                 %x75 4HEXDIG )  ; uXXXX                U+XXXX

         sq-unescaped = %x20-26 / %x28-5B / %x5D-10FFFF

   escape = %x5C                 ; \

   Note: double-quoted strings follow JSON in RFC 8259 [RFC8259].
   Single-quoted strings follow an analogous pattern.

Semantics

   If the union child is a quoted string, the string must first have the
   surrounding quotes removed and then be unescaped by replacing each
   escaped character with its unicode equivalent to produce a key.  The
   union child matches any node which is an object with this key and
   selects the value corresponding to the key.  It does not match a node
   which is not an object.





Normington               Expires 24 January 2021                [Page 7]

Internet-Draft   JavaScript Object Notation (JSON) Path        July 2020


2.6.2.4.  Array Index

Syntax

   An array index is a union element consisting of an integer (in base
   10).

   union-element =/ integer
   integer = [%x2D] (%x30 / (%x31-39 *%x30-39))
                               ; optional - followed by 0 or
                               ; sequence of digits with no leading zero

   Note: the syntax does not allow integers with leading zeros such as
   "01" and "-01".

Semantics

   An array index matches any node which is an array and selects any
   element of the array indexed by the integer index.  It does not match
   a node which is not an array.

   A non-negative index "i" selects an element of an array of length
   "len" if and only if "0 <= i < len".  The index "0" selects the first
   element of a non-empty array and, providing "i < len - 1", index "i +
   1" selects the element immedately after (in array order) the element
   selected by index "i".

   A negative index "j" selects an element of an array of length "len"
   if and only if "0 <= j + len < len", in which case it selects the
   same element as selected by the non-negative index "j + len".

3.  IANA Considerations

   This memo includes no request to IANA.

   All drafts are required to have an IANA considerations section (see
   Guidelines for Writing an IANA Considerations Section in RFCs
   [RFC5226] for a guide).  If the draft does not require IANA to do
   anything, the section contains an explicit statement that this is the
   case (as above).  If there are no requirements for IANA, the section
   will be removed during conversion into an RFC by the RFC Editor.

4.  Security Considerations

   This section gives security considerations, as required by RFC 3552
   [RFC3552].





Normington               Expires 24 January 2021                [Page 8]

Internet-Draft   JavaScript Object Notation (JSON) Path        July 2020


5.  Alternatives

   An analogous standard, JSON Pointer, is provided by RFC 6901
   [RFC6901].

6.  References

6.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, RFC 3629, DOI 10.17487/RFC3629, November
              2003, <https://www.rfc-editor.org/info/rfc3629>.

   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234,
              DOI 10.17487/RFC5234, January 2008,
              <https://www.rfc-editor.org/info/rfc5234>.

6.2.  Informative References

   [Goessner] Stefan Gössner, "JSONPath - XPath for JSON", February
              2007, <https://goessner.net/articles/JsonPath/>.

   [RFC3552]  Rescorla, E. and B. Korver, "Guidelines for Writing RFC
              Text on Security Considerations", BCP 72, RFC 3552,
              DOI 10.17487/RFC3552, July 2003,
              <https://www.rfc-editor.org/info/rfc3552>.

   [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", RFC 5226,
              DOI 10.17487/RFC5226, May 2008,
              <https://www.rfc-editor.org/info/rfc5226>.

   [RFC6901]  Bryan, P., Ed., Zyp, K., and M. Nottingham, Ed.,
              "JavaScript Object Notation (JSON) Pointer", RFC 6901,
              DOI 10.17487/RFC6901, April 2013,
              <https://www.rfc-editor.org/info/rfc6901>.

   [RFC8259]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", STD 90, RFC 8259,
              DOI 10.17487/RFC8259, December 2017,
              <https://www.rfc-editor.org/info/rfc8259>.




Normington               Expires 24 January 2021                [Page 9]

Internet-Draft   JavaScript Object Notation (JSON) Path        July 2020


Author's Address

   Glyn Normington (editor)
   VMware, Inc.
   Winchester
   United Kingdom

   Email: glyn.normington@gmail.com











































Normington               Expires 24 January 2021               [Page 10]
